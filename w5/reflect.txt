1. Why do we try to use variables and macros to represent information rather than hardcode
 “magic” numbers (constant literals)?describe at least three advantages.

Ans-->
 i) Reduce Errors:
                   When we have macros there is less chances to make semantic errors like mistype the
                   variables.

ii) Increase Readibility and Maintainibility:
                   Macros increase the Readibility of the code by assigning a descriptive name to a constant
                   value which also helps to make any changes in the future.

iii)Flexibility:
                   By using variables and macros, we can change the value of a constant without having to
                   modify the code that uses that constant and it even make code reusable.
                
2. The rating values entered by the user required iteration to perform basic validations with each 
   iteration concentrated on testing for values to be within a specific range. Why do we not include 
   additional logic that sums and performs the average? Instead, the sum and average logic is placed 
   outside of any validation routine. Briefly explain two reasons why this is better design and refer 
   to the details of this workshop to justify your answer.

Ans--> 

i)    It is a good practice to separate different concerns into different parts of the code.
  The validation routine's main point is to check if the values entered by the user are 
  within a specific range, whereas the summing and averaging logic's concern is to calculate 
  the sum and average of the values. By separating these two concerns, it reduces the chances of 
  bugs and even the code becomes more "maintainable", "readable", and "reusable".

ii)   Calculating the sum and average for each iteration's values and also validating it
 can significantly slow down the performance of the application, especially if a large number of
 values are being validated. By placing the summing and averaging logic outside of the validation
 routine, the code will perform sum and average only once, after all the values 
 have been validated which improves performance of the code.  



                  